import{aw as p,aO as l,cC as n,n as g,cD as _,ai as f,z as u,aJ as d,a2 as w,s as E}from"./index-1de34779.js";import{c as q,u as F}from"./featureConversionUtils-b6ed3a7e.js";import{g as x}from"./FeatureStore-365279b4.js";import{g as S,f as T}from"./projectionSupport-5b721288.js";import{e as j}from"./QueryEngine-b96d22be.js";import{T as I,I as b}from"./geojson-f12af5a3.js";import{m as C}from"./sourceUtils-4fe22393.js";import{K as P}from"./wfsUtils-024d709d.js";import"./aaBoundingRect-da6cd5b1.js";import"./OptimizedGeometry-48f8abe8.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BoundsStore-54a782bb.js";import"./PooledRBush-bdedf8b7.js";import"./quickselect-56c5966e.js";import"./centroid-420f73c1.js";import"./utils-a7d63c3f.js";import"./normalizeUtils-744c3a37.js";import"./normalizeUtilsCommon-5bd32cf4.js";import"./utils-fd07bdbf.js";import"./json-48e3ea08.js";import"./QueryEngineResult-4c127b01.js";import"./quantizationUtils-8e0165c7.js";import"./ItemCache-edc397ee.js";import"./WhereClause-22950160.js";import"./executionError-fb3f283a.js";import"./utils-55006552.js";import"./generateRendererUtils-08b5e698.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-1a3b1d2e.js";import"./Scheduler-895f76dc.js";import"./xmlUtils-444cb4c0.js";class pe{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,s=await P(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:e});await I(s),p(e);const a=b(s,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!l(this._queryEngine.spatialReference,n))for(const r of a)g(r.geometry)&&(r.geometry=q(S(F(r.geometry,this._queryEngine.geometryType,!1,!1),n,this._queryEngine.spatialReference)));let o=1;for(const r of a){const i={};C(this._fieldsIndex,i,r.attributes,!0),r.attributes=i,r.attributes[t]==null&&(r.objectId=r.attributes[t]=o++)}return a}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:s,getFeatureOutputFormat:a,spatialReference:o,fields:r,geometryType:i,featureType:h,objectIdField:m,customParameters:y}=e;this._featureType=h,this._customParameters=y,this._getFeatureUrl=s,this._getFeatureOutputFormat=a,this._fieldsIndex=new _(r),await this._checkProjection(o),p(t),this._queryEngine=new j({fields:r,geometryType:i,hasM:!1,hasZ:!1,objectIdField:m,spatialReference:o,timeInfo:null,featureStore:new x({geometryType:i,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(f(t.signal));return this._queryEngine.featureStore.addMany(c),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=d(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),s&&this._queryEngine.featureStore.addMany(s)},s=>{this._queryEngine.featureStore.clear(),w(s)||E.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:s}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await T(n,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{pe as default};
