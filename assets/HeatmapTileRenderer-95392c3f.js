import{jr as m,e as p,a,gK as l}from"./index-c754ff65.js";import{n as h}from"./BitmapTileContainer-2b06fdfb.js";import{o as d}from"./BaseTileRenderer-75efaee1.js";import"./aaBoundingRect-5c57438c.js";import"./MapView-2d5cc699.js";import"./Viewpoint-eb6ec031.js";import"./Cyclical-5c5da130.js";import"./CollectionFlattener-459cb615.js";import"./TileInfo-2589d4ff.js";import"./TileKey-b87e0dc5.js";import"./widget-7352089c.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-2f7fbe5e.js";import"./Heading-adb0ad8a.js";import"./symbolUtils-5e5f8d3d.js";import"./utils-7a1e2b28.js";import"./ItemCache-096925bc.js";import"./utils-bd924f31.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e11be45e.js";import"./webStyleSymbolUtils-5cb46bea.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-ca6c73e1.js";import"./utils-3b5f5c5a.js";import"./query-d95b3dd5.js";import"./normalizeUtils-703059af.js";import"./normalizeUtilsCommon-258cba9f.js";import"./pbfQueryUtils-06c77b54.js";import"./pbf-f46def03.js";import"./OptimizedGeometry-9aa8664b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-c00360ef.js";import"./Scheduler-68df8c73.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-9b5cecfc.js";import"./accessibleHandler-b82b4bb4.js";import"./vmEvent-d773b6c5.js";import"./Map-e64f8eb2.js";import"./Basemap-11f6c81d.js";import"./loadAll-026b7227.js";import"./writeUtils-a7e8e976.js";import"./basemapUtils-abd7da37.js";import"./TablesMixin-8184194b.js";import"./GraphicsCollection-b80722b0.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-bbd3449a.js";import"./vec2f64-22afc56f.js";import"./mat3-21bcfd83.js";import"./TileStrategy-1967197e.js";import"./TileInfoView-ccee1155.js";import"./quickselect-56c5966e.js";import"./TileKey-b1f5cdb9.js";import"./capabilities-57d1a30a.js";import"./Bitmap-b4ca4b09.js";import"./Container-72cba08e.js";import"./EffectView-a1fb6514.js";import"./definitions-f329b961.js";import"./enums-64ab819c.js";import"./Texture-ca46920b.js";import"./TiledDisplayObject-accbee08.js";import"./WGLContainer-e2488f5a.js";import"./VertexArrayObject-07c1da56.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-6aec3839.js";import"./enums-55085e26.js";import"./number-b10bd8f5.js";import"./ProgramTemplate-9f1c124b.js";import"./MaterialKey-5b247dd4.js";import"./alignmentUtils-ae955d28.js";import"./utils-7263c34f.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./TileContainer-842f76b1.js";class c{constructor(){this.gradient=null,this.height=512,this.intensities=null,this.width=512}render(i){m(i,512,this.intensities,this.gradient,this.minDensity,this.maxDensity)}}let n=class extends d{constructor(t){super(t),this._intensityInfo={minDensity:0,maxDensity:0},this.type="heatmap",this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new h(t.tileInfoView)}createTile(t){const i=this._container.createTile(t);return this.tileInfoView.getTileCoords(i.bitmap,t),i.bitmap.resolution=this.tileInfoView.getTileResolution(t),i}onConfigUpdate(){const t=this.layer.renderer;if(t.type==="heatmap"){const{minDensity:i,maxDensity:e,colorStops:s}=t;this._intensityInfo.minDensity=i,this._intensityInfo.maxDensity=e,this._gradient=l(s),this.tiles.forEach(o=>{const r=o.bitmap.source;r&&(r.minDensity=i,r.maxDensity=e,r.gradient=this._gradient,o.bitmap.invalidateTexture())})}}hitTest(){return Promise.resolve([])}install(t){t.addChild(this._container)}uninstall(t){this._container.removeAllChildren(),t.removeChild(this._container)}disposeTile(t){this._container.removeChild(t),t.destroy()}supportsRenderer(t){return t&&t.type==="heatmap"}onTileData(t){const i=this.tiles.get(t.tileKey);if(!i)return;const e=t.intensityInfo,{minDensity:s,maxDensity:o}=this._intensityInfo,r=i.bitmap.source||new c;r.intensities=e&&e.matrix||null,r.minDensity=s,r.maxDensity=o,r.gradient=this._gradient,i.bitmap.source=r,this._container.addChild(i),this._container.requestRender(),this.requestUpdate()}onTileError(t){console.error(t)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(t,i){return console.error(t),Promise.reject()}};n=p([a("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],n);const Kt=n;export{Kt as default};
