import{e as a,y as l,c_ as n,a as h,j as d,l as o,ak as p,bh as V,g as y}from"./index-c754ff65.js";import{r as w}from"./GroupContainer-e5e671e2.js";import{u as v,f as u}from"./LayerView-968a0443.js";import"./WGLContainer-e2488f5a.js";import"./MapView-2d5cc699.js";import"./Viewpoint-eb6ec031.js";import"./Cyclical-5c5da130.js";import"./CollectionFlattener-459cb615.js";import"./TileInfo-2589d4ff.js";import"./aaBoundingRect-5c57438c.js";import"./TileKey-b87e0dc5.js";import"./widget-7352089c.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-2f7fbe5e.js";import"./Heading-adb0ad8a.js";import"./symbolUtils-5e5f8d3d.js";import"./utils-7a1e2b28.js";import"./ItemCache-096925bc.js";import"./utils-bd924f31.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e11be45e.js";import"./webStyleSymbolUtils-5cb46bea.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-ca6c73e1.js";import"./utils-3b5f5c5a.js";import"./query-d95b3dd5.js";import"./normalizeUtils-703059af.js";import"./normalizeUtilsCommon-258cba9f.js";import"./pbfQueryUtils-06c77b54.js";import"./pbf-f46def03.js";import"./OptimizedGeometry-9aa8664b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-c00360ef.js";import"./Scheduler-68df8c73.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-9b5cecfc.js";import"./accessibleHandler-b82b4bb4.js";import"./vmEvent-d773b6c5.js";import"./Map-e64f8eb2.js";import"./Basemap-11f6c81d.js";import"./loadAll-026b7227.js";import"./writeUtils-a7e8e976.js";import"./basemapUtils-abd7da37.js";import"./TablesMixin-8184194b.js";import"./GraphicsCollection-b80722b0.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-bbd3449a.js";import"./vec2f64-22afc56f.js";import"./mat3-21bcfd83.js";import"./TileStrategy-1967197e.js";import"./TileInfoView-ccee1155.js";import"./quickselect-56c5966e.js";import"./TileKey-b1f5cdb9.js";import"./capabilities-57d1a30a.js";import"./definitions-f329b961.js";import"./VertexArrayObject-07c1da56.js";import"./Texture-ca46920b.js";import"./enums-64ab819c.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-6aec3839.js";import"./enums-55085e26.js";import"./number-b10bd8f5.js";import"./ProgramTemplate-9f1c124b.js";import"./MaterialKey-5b247dd4.js";import"./alignmentUtils-ae955d28.js";import"./utils-7263c34f.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./Container-72cba08e.js";import"./EffectView-a1fb6514.js";import"./earcut-61f7b102.js";let r=class extends v{constructor(i){super(i),this.type="group",this.layerViews=new d}_allLayerViewVisibility(i){this.layerViews.forEach(e=>{e.visible=i})}initialize(){this.handles.add([this.layerViews.on("change",i=>this._layerViewsChangeHandler(i)),o(()=>this.layer.visibilityMode,()=>this._applyVisibility(()=>this._allLayerViewVisibility(this.visible),()=>this._applyExclusiveVisibility(null)),p),o(()=>this.visible,i=>{this._applyVisibility(()=>this._allLayerViewVisibility(i),()=>{})},p)],"grouplayerview"),this._layerViewsChangeHandler({target:null,added:this.layerViews.toArray(),removed:[],moved:[]})}set layerViews(i){this._set("layerViews",V(i,this._get("layerViews")))}get updatingProgress(){return this.layerViews.length===0?1:this.layerViews.reduce((i,e)=>i+e.updatingProgress,0)/this.layerViews.length}isUpdating(){return this.layerViews.some(i=>i.updating)}_hasLayerViewVisibleOverrides(){return this.layerViews.some(i=>i._isOverridden("visible"))}_findLayerViewForLayer(i){return i&&this.layerViews.find(e=>e.layer===i)}_firstVisibleOnLayerOrder(){const i=this.layer.layers.find(e=>{var t;return!!((t=this._findLayerViewForLayer(e))!=null&&t.visible)});return i&&this._findLayerViewForLayer(i)}_applyExclusiveVisibility(i){y(i)&&(i=this._firstVisibleOnLayerOrder(),y(i)&&this.layerViews.length>0&&(i=this._findLayerViewForLayer(this.layer.layers.getItemAt(0)))),this.layerViews.forEach(e=>{e.visible=e===i})}_layerViewsChangeHandler(i){this.handles.remove("grouplayerview:visible"),this.handles.add(this.layerViews.map(t=>o(()=>t.visible,s=>this._applyVisibility(()=>{s!==this.visible&&(t.visible=this.visible)},()=>this._applyExclusiveVisibility(s?t:null)),p)).toArray(),"grouplayerview:visible");const e=i.added[i.added.length-1];this._applyVisibility(()=>this._allLayerViewVisibility(this.visible),()=>this._applyExclusiveVisibility(e!=null&&e.visible?e:null))}_applyVisibility(i,e){var t,s;this._hasLayerViewVisibleOverrides()&&(((t=this.layer)==null?void 0:t.visibilityMode)==="inherited"?i():((s=this.layer)==null?void 0:s.visibilityMode)==="exclusive"&&e())}};a([l({cast:n})],r.prototype,"layerViews",null),a([l({readOnly:!0})],r.prototype,"updatingProgress",null),a([l()],r.prototype,"view",void 0),r=a([h("esri.views.layers.GroupLayerView")],r);const b=r;let m=class extends u(b){constructor(){super(...arguments),this.container=new w}attach(){this._updateStageChildren(),this.addAttachHandles(this.layerViews.on("after-changes",()=>this._updateStageChildren()))}detach(){this.container.removeAllChildren()}update(i){}moveStart(){}viewChange(){}moveEnd(){}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((i,e)=>this.container.addChildAt(i.container,e))}};m=a([h("esri.views.2d.layers.GroupLayerView2D")],m);const zi=m;export{zi as default};
