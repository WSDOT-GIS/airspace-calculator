import{jr as m,e as p,a,gK as l}from"./index-1de34779.js";import{n as h}from"./BitmapTileContainer-fd47143d.js";import{o as d}from"./BaseTileRenderer-34615e94.js";import"./aaBoundingRect-da6cd5b1.js";import"./MapView-bd487abe.js";import"./Viewpoint-ea32c9f1.js";import"./Cyclical-49a6a04d.js";import"./CollectionFlattener-69c675dd.js";import"./TileInfo-c53ba83b.js";import"./TileKey-b87e0dc5.js";import"./widget-4447051f.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-191d5abd.js";import"./Heading-bde04247.js";import"./symbolUtils-0c3c786b.js";import"./utils-47432d32.js";import"./ItemCache-edc397ee.js";import"./utils-960d8c85.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e3bbc217.js";import"./webStyleSymbolUtils-1470c8f4.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-7409703b.js";import"./utils-fd07bdbf.js";import"./query-87b53af6.js";import"./normalizeUtils-744c3a37.js";import"./normalizeUtilsCommon-5bd32cf4.js";import"./pbfQueryUtils-9e72fccf.js";import"./pbf-2cecd0ba.js";import"./OptimizedGeometry-48f8abe8.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-b6ed3a7e.js";import"./Scheduler-895f76dc.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-2f121aae.js";import"./accessibleHandler-c78ecdf0.js";import"./vmEvent-d773b6c5.js";import"./Map-183141ee.js";import"./Basemap-05b492be.js";import"./loadAll-0643270c.js";import"./writeUtils-c3a30ac3.js";import"./basemapUtils-d89c0772.js";import"./TablesMixin-a90c4927.js";import"./GraphicsCollection-96c69dc0.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-a3077e7b.js";import"./vec2f64-22afc56f.js";import"./mat3-fdb5e70d.js";import"./TileStrategy-ae37d4cf.js";import"./TileInfoView-d2de27b2.js";import"./quickselect-56c5966e.js";import"./TileKey-d02c5724.js";import"./capabilities-99358f40.js";import"./Bitmap-b9bf088d.js";import"./Container-8b0f7655.js";import"./EffectView-8576c2a4.js";import"./definitions-f329b961.js";import"./enums-64ab819c.js";import"./Texture-33390e7d.js";import"./TiledDisplayObject-7dc31753.js";import"./WGLContainer-b530f017.js";import"./VertexArrayObject-a0fc2785.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-0ee4e5aa.js";import"./enums-55085e26.js";import"./number-b10bd8f5.js";import"./ProgramTemplate-178dc95f.js";import"./MaterialKey-9cb0f200.js";import"./alignmentUtils-ae955d28.js";import"./utils-6e7a4f80.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./TileContainer-bd636945.js";class c{constructor(){this.gradient=null,this.height=512,this.intensities=null,this.width=512}render(i){m(i,512,this.intensities,this.gradient,this.minDensity,this.maxDensity)}}let n=class extends d{constructor(t){super(t),this._intensityInfo={minDensity:0,maxDensity:0},this.type="heatmap",this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new h(t.tileInfoView)}createTile(t){const i=this._container.createTile(t);return this.tileInfoView.getTileCoords(i.bitmap,t),i.bitmap.resolution=this.tileInfoView.getTileResolution(t),i}onConfigUpdate(){const t=this.layer.renderer;if(t.type==="heatmap"){const{minDensity:i,maxDensity:e,colorStops:s}=t;this._intensityInfo.minDensity=i,this._intensityInfo.maxDensity=e,this._gradient=l(s),this.tiles.forEach(o=>{const r=o.bitmap.source;r&&(r.minDensity=i,r.maxDensity=e,r.gradient=this._gradient,o.bitmap.invalidateTexture())})}}hitTest(){return Promise.resolve([])}install(t){t.addChild(this._container)}uninstall(t){this._container.removeAllChildren(),t.removeChild(this._container)}disposeTile(t){this._container.removeChild(t),t.destroy()}supportsRenderer(t){return t&&t.type==="heatmap"}onTileData(t){const i=this.tiles.get(t.tileKey);if(!i)return;const e=t.intensityInfo,{minDensity:s,maxDensity:o}=this._intensityInfo,r=i.bitmap.source||new c;r.intensities=e&&e.matrix||null,r.minDensity=s,r.maxDensity=o,r.gradient=this._gradient,i.bitmap.source=r,this._container.addChild(i),this._container.requestRender(),this.requestUpdate()}onTileError(t){console.error(t)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(t,i){return console.error(t),Promise.reject()}};n=p([a("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],n);const Kt=n;export{Kt as default};
