import{e as p,y as n,e6 as F,a as I,b as S,z as g,a2 as M,s as E,l as R,aP as q}from"./index-c754ff65.js";import{a as b}from"./BitmapContainer-c2c49ee7.js";import{f as U,u as V}from"./LayerView-968a0443.js";import{v as W}from"./ExportStrategy-9ab69efa.js";import{i as L}from"./RefreshableLayerView-22763354.js";import{l as j}from"./ExportWMSImageParameters-b3c16301.js";import"./WGLContainer-e2488f5a.js";import"./MapView-2d5cc699.js";import"./Viewpoint-eb6ec031.js";import"./Cyclical-5c5da130.js";import"./CollectionFlattener-459cb615.js";import"./TileInfo-2589d4ff.js";import"./aaBoundingRect-5c57438c.js";import"./TileKey-b87e0dc5.js";import"./widget-7352089c.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-2f7fbe5e.js";import"./Heading-adb0ad8a.js";import"./symbolUtils-5e5f8d3d.js";import"./utils-7a1e2b28.js";import"./ItemCache-096925bc.js";import"./utils-bd924f31.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e11be45e.js";import"./webStyleSymbolUtils-5cb46bea.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-ca6c73e1.js";import"./utils-3b5f5c5a.js";import"./query-d95b3dd5.js";import"./normalizeUtils-703059af.js";import"./normalizeUtilsCommon-258cba9f.js";import"./pbfQueryUtils-06c77b54.js";import"./pbf-f46def03.js";import"./OptimizedGeometry-9aa8664b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-c00360ef.js";import"./Scheduler-68df8c73.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-9b5cecfc.js";import"./accessibleHandler-b82b4bb4.js";import"./vmEvent-d773b6c5.js";import"./Map-e64f8eb2.js";import"./Basemap-11f6c81d.js";import"./loadAll-026b7227.js";import"./writeUtils-a7e8e976.js";import"./basemapUtils-abd7da37.js";import"./TablesMixin-8184194b.js";import"./GraphicsCollection-b80722b0.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-bbd3449a.js";import"./vec2f64-22afc56f.js";import"./mat3-21bcfd83.js";import"./TileStrategy-1967197e.js";import"./TileInfoView-ccee1155.js";import"./quickselect-56c5966e.js";import"./TileKey-b1f5cdb9.js";import"./capabilities-57d1a30a.js";import"./definitions-f329b961.js";import"./VertexArrayObject-07c1da56.js";import"./Texture-ca46920b.js";import"./enums-64ab819c.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-6aec3839.js";import"./enums-55085e26.js";import"./number-b10bd8f5.js";import"./ProgramTemplate-9f1c124b.js";import"./MaterialKey-5b247dd4.js";import"./alignmentUtils-ae955d28.js";import"./utils-7263c34f.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./Container-72cba08e.js";import"./EffectView-a1fb6514.js";import"./earcut-61f7b102.js";import"./Bitmap-b4ca4b09.js";const z=e=>{let t=class extends e{initialize(){this.exportImageParameters=new j({layer:this.layer})}destroy(){this.exportImageParameters=S(this.exportImageParameters)}get exportImageVersion(){var r;return(r=this.exportImageParameters)==null||r.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(r){const{layer:o}=this;if(!r)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:o}));const{popupEnabled:m}=o;if(!m)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:m}));const u=this.createFetchPopupFeaturesQuery(r);if(!u)return Promise.resolve([]);const{extent:i,width:a,height:s,x:d,y:c}=u;if(!(i&&a&&s))throw new g("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:i,width:a,height:s});return o.fetchFeatureInfo(i,a,s,d,c)}};return p([n()],t.prototype,"exportImageParameters",void 0),p([n({readOnly:!0})],t.prototype,"exportImageVersion",null),p([n()],t.prototype,"layer",void 0),p([n(F)],t.prototype,"timeExtent",void 0),t=p([I("esri.layers.mixins.WMSLayerView")],t),t};let h=class extends z(L(U(V))){constructor(){super(...arguments),this.bitmapContainer=new b}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(t=>{M(t)||E.getLogger(this.declaredClass).error(t)})}attach(){const{layer:e}=this,{imageMaxHeight:t,imageMaxWidth:r}=e;this.bitmapContainer=new b,this.container.addChild(this.bitmapContainer),this.strategy=new W({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=S(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:t,bitmapContainer:r}=this,{x:o,y:m}=e,{spatialReference:u}=t;let i,a=0,s=0;if(r.children.some(C=>{const{width:x,height:f,resolution:w,x:l,y}=C,v=l+w*x,P=y-w*f;return o>=l&&o<=v&&m<=y&&m>=P&&(i=new q({xmin:l,ymin:P,xmax:v,ymax:y,spatialReference:u}),a=x,s=f,!0)}),!i)return null;const d=i.width/a,c=Math.round((o-i.xmin)/d),$=Math.round((i.ymax-m)/d);return{extent:i,width:a,height:s,x:c,y:$}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,o){return this.layer.fetchImageBitmap(e,t,r,{timeExtent:this.timeExtent,...o})}};p([n()],h.prototype,"strategy",void 0),p([n()],h.prototype,"updating",void 0),h=p([I("esri.views.2d.layers.WMSLayerView2D")],h);const se=h;export{se as default};
