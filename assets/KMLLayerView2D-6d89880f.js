import{aG as k,al as U,U as z,j as F,l as H,aI as W,b as v,aP as L,n as I,g as Y,aH as K,aQ as $,cf as Q,bQ as j,bT as J,e as V,y as S,a as X}from"./index-c754ff65.js";import{b as D,g as Z,d as tt}from"./kmlUtils-62cde1d7.js";import{f as it}from"./utils-3b5f5c5a.js";import{i as P}from"./GraphicsCollection-b80722b0.js";import{T as et,S as at,R as rt}from"./Bitmap-b4ca4b09.js";import{a as st}from"./BitmapContainer-c2c49ee7.js";import{f as ot,u as nt}from"./LayerView-968a0443.js";import{i as M}from"./GraphicContainer-c8c09d12.js";import{a as R}from"./GraphicsView2D-734762b1.js";import{C as lt,$ as pt}from"./rasterProjectionHelper-56d2ab5a.js";import{n as mt}from"./WGLContainer-e2488f5a.js";import{I as ht,o as ct}from"./RenderingContext-b944f363.js";import{P as T,G as E,D as q,L as G,Y as dt,V as gt,f as N}from"./enums-64ab819c.js";import{x as ut}from"./VertexArrayObject-07c1da56.js";import{l as _t}from"./rasterUtils-aeb78c01.js";import{E as B}from"./Texture-ca46920b.js";import"./mat3-21bcfd83.js";import"./MapView-2d5cc699.js";import"./Viewpoint-eb6ec031.js";import"./Cyclical-5c5da130.js";import"./CollectionFlattener-459cb615.js";import"./TileInfo-2589d4ff.js";import"./aaBoundingRect-5c57438c.js";import"./TileKey-b87e0dc5.js";import"./widget-7352089c.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-2f7fbe5e.js";import"./Heading-adb0ad8a.js";import"./symbolUtils-5e5f8d3d.js";import"./utils-7a1e2b28.js";import"./ItemCache-096925bc.js";import"./utils-bd924f31.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e11be45e.js";import"./webStyleSymbolUtils-5cb46bea.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-ca6c73e1.js";import"./query-d95b3dd5.js";import"./normalizeUtils-703059af.js";import"./normalizeUtilsCommon-258cba9f.js";import"./pbfQueryUtils-06c77b54.js";import"./pbf-f46def03.js";import"./OptimizedGeometry-9aa8664b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-c00360ef.js";import"./Scheduler-68df8c73.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-9b5cecfc.js";import"./accessibleHandler-b82b4bb4.js";import"./vmEvent-d773b6c5.js";import"./Map-e64f8eb2.js";import"./Basemap-11f6c81d.js";import"./loadAll-026b7227.js";import"./writeUtils-a7e8e976.js";import"./basemapUtils-abd7da37.js";import"./TablesMixin-8184194b.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-bbd3449a.js";import"./vec2f64-22afc56f.js";import"./TileStrategy-1967197e.js";import"./TileInfoView-ccee1155.js";import"./quickselect-56c5966e.js";import"./TileKey-b1f5cdb9.js";import"./capabilities-57d1a30a.js";import"./Container-72cba08e.js";import"./EffectView-a1fb6514.js";import"./definitions-f329b961.js";import"./color-6aec3839.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-b10bd8f5.js";import"./BaseGraphicContainer-862908ea.js";import"./FeatureContainer-86576b95.js";import"./AttributeStoreView-bcdc844b.js";import"./TiledDisplayObject-accbee08.js";import"./visualVariablesUtils-50880e5a.js";import"./visualVariablesUtils-7dbd5d40.js";import"./TileContainer-842f76b1.js";import"./utils-7263c34f.js";import"./MaterialKey-5b247dd4.js";import"./alignmentUtils-ae955d28.js";import"./vec3f32-ad1dc57f.js";import"./cimAnalyzer-02b56dc2.js";import"./fontUtils-afce1abc.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-fea59923.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-193e54d0.js";import"./floatRGBA-4f7fa53a.js";import"./normalizeUtilsSync-f1c7dfdb.js";import"./projectionSupport-60e6d2f8.js";import"./json-48e3ea08.js";import"./Matcher-10c827e6.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-0c6b5b1e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./ExpandedCIM-2a6dd26b.js";import"./schemaUtils-9a6e7dda.js";import"./createSymbolSchema-21e81f0c.js";import"./util-e5019f71.js";import"./ComputedAttributeStorage-b555102a.js";import"./arcadeTimeUtils-ef4a84e4.js";import"./executionError-fb3f283a.js";import"./centroid-335ed93e.js";import"./ProgramTemplate-9f1c124b.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./programUtils-8e54bcd5.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-e1b3a745.js";import"./basicInterfaces-b7051eb1.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./webgl-debug-b1f7a2c5.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl");e.getExtension("OES_texture_float"),this._rctx=new ht(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},s=ct("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(s.shaders.vertexShader,s.shaders.fragmentShader,s.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new mt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,s=!1){const e=k(t.extent,r),a=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:l}=lt(a,r,t.extent);let p=(o+l)/2;const n=Math.round((e.xmax-e.xmin)/p),d=Math.round((e.ymax-e.ymin)/p);p=(e.width/n+e.height/d)/2;const C=new U({x:p,y:p,spatialReference:e.spatialReference}),w=pt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),x=_t(this._rctx,w),u=new B(this._rctx,{width:n,height:d,pixelFormat:T.RGBA,dataType:E.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:G.LINEAR,hasMipmap:!1}),h=new ut(this._rctx,{colorTarget:dt.TEXTURE,depthStencilTarget:gt.NONE,width:n,height:d},u);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:y=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",y,f),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),s){const{width:_=0,height:c=0}=h.descriptor,b=new ImageData(_,c);return h.readPixels(0,0,_,c,T.RGBA,E.UNSIGNED_BYTE,b.data),h.detachColorTexture(N.COLOR_ATTACHMENT0),h.dispose(),{texture:u,extent:e,imageData:b}}return h.detachColorTexture(N.COLOR_ATTACHMENT0),h.dispose(),{texture:u,extent:e}}reprojectBitmapData(t,r){const s=et(t.bitmapData)?at(t.bitmapData):t.bitmapData,e=new B(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:T.RGBA,dataType:E.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:G.LINEAR,hasMipmap:!1},s),a=this.reprojectTexture({texture:e,extent:t.extent},r,!0);a.texture.dispose();const o=document.createElement("canvas"),l=a.imageData;return o.width=l.width,o.height=l.height,o.getContext("2d").putImageData(l,0,0),{bitmapData:o,extent:a.extent}}async loadAndReprojectBitmapData(t,r,s){const e=(await z(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=e.width,a.height=e.height;const o=a.getContext("2d");o.drawImage(e,0,0);const l=o.getImageData(0,0,a.width,a.height);if(r.spatialReference.equals(s))return{bitmapData:l,extent:r};const p=this.reprojectBitmapData({bitmapData:l,extent:r},s);return{bitmapData:p.bitmapData,extent:p.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class O{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends ot(nt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new st,this._kmlVisualData=new O,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new F}async hitTest(i,t){var s,e,a;const r=this.layer;return[(s=this._pointsView)==null?void 0:s.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(a=this._polygonsView)==null?void 0:a.hitTest(i)].flat().filter(Boolean).map(o=>(o.layer=r,o.sourceLayer=r,{type:"graphic",graphic:o,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),H(()=>this.layer.visibleSublayers,i=>{for(const[t,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=v(this._polygonsView),this._polylinesView=v(this._polylinesView),this._pointsView=v(this._pointsView),this._imageReprojector=v(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,r;((t=this.view.spatialReference)!=null&&t.isWGS84||(r=this.view.spatialReference)!=null&&r.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,L.fromJSON(i.extent),this.view.spatialReference).then(s=>{const e=new rt(s.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});e.x=s.extent.xmin,e.y=s.extent.ymax,e.resolution=s.extent.width/s.bitmapData.width,e.rotation=i.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(i,e)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:s,httpQuery:e}=i;if(I(r)){if(Y(t))throw new Error("Loading this network link requires a view state.");let a;if(await K(),I(s)&&s!==1){const c=new L(t.extent);c.expand(s),a=c}else a=t.extent;a=k(a,$.WGS84);const o=k(a,$.WebMercator),l=a.xmin,p=a.xmax,n=a.ymin,d=a.ymax,C=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,x=Math.max(o.width,o.height),u={"[bboxWest]":l.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":C.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":Q,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const b in c)for(const A in u)c[b]=c[b].replace(A,u[A])},y=j(r);h(y);let f={};I(e)&&(f=j(e),h(f));const _=it(i.href);return _.query={..._.query,...y,...f},`${_.path}?${J(y)}`}return i.href}async _fetchService(i){const t=new O;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async s=>{for(const e of s.sublayers){t.allSublayers.set(e.id,e);const a=e.points?await D(e.points):[],o=e.polylines?await D(e.polylines):[],l=e.polygons?await D(e.polygons):[],p=e.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...l.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...p.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,r)}}})}_fetchParsedKML(i,t){return Z(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>tt(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};V([S()],g.prototype,"_pointsView",void 0),V([S()],g.prototype,"_polylinesView",void 0),V([S()],g.prototype,"_polygonsView",void 0),V([S()],g.prototype,"updating",void 0),g=V([X("esri.views.2d.layers.KMLLayerView2D")],g);const Ce=g;export{Ce as default};
