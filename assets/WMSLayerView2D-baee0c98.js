import{e as p,y as n,e6 as F,a as I,b as S,z as g,a2 as M,s as E,l as R,aP as q}from"./index-1de34779.js";import{a as b}from"./BitmapContainer-e3bd3285.js";import{f as U,u as V}from"./LayerView-c09ce6b8.js";import{v as W}from"./ExportStrategy-357238c9.js";import{i as L}from"./RefreshableLayerView-d43c8109.js";import{l as j}from"./ExportWMSImageParameters-264e2784.js";import"./WGLContainer-b530f017.js";import"./MapView-bd487abe.js";import"./Viewpoint-ea32c9f1.js";import"./Cyclical-49a6a04d.js";import"./CollectionFlattener-69c675dd.js";import"./TileInfo-c53ba83b.js";import"./aaBoundingRect-da6cd5b1.js";import"./TileKey-b87e0dc5.js";import"./widget-4447051f.js";import"./uuid-73213768.js";import"./byteSizeEstimations-90c5a50d.js";import"./AttachmentInfo-191d5abd.js";import"./Heading-bde04247.js";import"./symbolUtils-0c3c786b.js";import"./utils-47432d32.js";import"./ItemCache-edc397ee.js";import"./utils-960d8c85.js";import"./colorUtils-c0f43caf.js";import"./mat2d-e3bbc217.js";import"./webStyleSymbolUtils-1470c8f4.js";import"./devEnvironmentUtils-5002a058.js";import"./executeQueryJSON-7409703b.js";import"./utils-fd07bdbf.js";import"./query-87b53af6.js";import"./normalizeUtils-744c3a37.js";import"./normalizeUtilsCommon-5bd32cf4.js";import"./pbfQueryUtils-9e72fccf.js";import"./pbf-2cecd0ba.js";import"./OptimizedGeometry-48f8abe8.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./featureConversionUtils-b6ed3a7e.js";import"./Scheduler-895f76dc.js";import"./layerViewUtils-5da1782e.js";import"./GoTo-2f121aae.js";import"./accessibleHandler-c78ecdf0.js";import"./vmEvent-d773b6c5.js";import"./Map-183141ee.js";import"./Basemap-05b492be.js";import"./loadAll-0643270c.js";import"./writeUtils-c3a30ac3.js";import"./basemapUtils-d89c0772.js";import"./TablesMixin-a90c4927.js";import"./GraphicsCollection-96c69dc0.js";import"./ViewingMode-915d19cb.js";import"./unitBezier-881ac1eb.js";import"./vec2-a3077e7b.js";import"./vec2f64-22afc56f.js";import"./mat3-fdb5e70d.js";import"./TileStrategy-ae37d4cf.js";import"./TileInfoView-d2de27b2.js";import"./quickselect-56c5966e.js";import"./TileKey-d02c5724.js";import"./capabilities-99358f40.js";import"./definitions-f329b961.js";import"./VertexArrayObject-a0fc2785.js";import"./Texture-33390e7d.js";import"./enums-64ab819c.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-0ee4e5aa.js";import"./enums-55085e26.js";import"./number-b10bd8f5.js";import"./ProgramTemplate-178dc95f.js";import"./MaterialKey-9cb0f200.js";import"./alignmentUtils-ae955d28.js";import"./utils-6e7a4f80.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./Container-8b0f7655.js";import"./EffectView-8576c2a4.js";import"./earcut-61f7b102.js";import"./Bitmap-b9bf088d.js";const z=e=>{let t=class extends e{initialize(){this.exportImageParameters=new j({layer:this.layer})}destroy(){this.exportImageParameters=S(this.exportImageParameters)}get exportImageVersion(){var r;return(r=this.exportImageParameters)==null||r.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(r){const{layer:o}=this;if(!r)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:o}));const{popupEnabled:m}=o;if(!m)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:m}));const u=this.createFetchPopupFeaturesQuery(r);if(!u)return Promise.resolve([]);const{extent:i,width:a,height:s,x:d,y:c}=u;if(!(i&&a&&s))throw new g("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:i,width:a,height:s});return o.fetchFeatureInfo(i,a,s,d,c)}};return p([n()],t.prototype,"exportImageParameters",void 0),p([n({readOnly:!0})],t.prototype,"exportImageVersion",null),p([n()],t.prototype,"layer",void 0),p([n(F)],t.prototype,"timeExtent",void 0),t=p([I("esri.layers.mixins.WMSLayerView")],t),t};let h=class extends z(L(U(V))){constructor(){super(...arguments),this.bitmapContainer=new b}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(t=>{M(t)||E.getLogger(this.declaredClass).error(t)})}attach(){const{layer:e}=this,{imageMaxHeight:t,imageMaxWidth:r}=e;this.bitmapContainer=new b,this.container.addChild(this.bitmapContainer),this.strategy=new W({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=S(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:t,bitmapContainer:r}=this,{x:o,y:m}=e,{spatialReference:u}=t;let i,a=0,s=0;if(r.children.some(C=>{const{width:x,height:f,resolution:w,x:l,y}=C,v=l+w*x,P=y-w*f;return o>=l&&o<=v&&m<=y&&m>=P&&(i=new q({xmin:l,ymin:P,xmax:v,ymax:y,spatialReference:u}),a=x,s=f,!0)}),!i)return null;const d=i.width/a,c=Math.round((o-i.xmin)/d),$=Math.round((i.ymax-m)/d);return{extent:i,width:a,height:s,x:c,y:$}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,o){return this.layer.fetchImageBitmap(e,t,r,{timeExtent:this.timeExtent,...o})}};p([n()],h.prototype,"strategy",void 0),p([n()],h.prototype,"updating",void 0),h=p([I("esri.views.2d.layers.WMSLayerView2D")],h);const se=h;export{se as default};
